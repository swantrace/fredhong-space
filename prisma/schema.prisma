// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  READER
  AUTHOR
  ADMIN
}

enum PostType {
  ARTICLE
  PROJECT
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  role       Role       @default(READER)
  posts      Post[]     @relation("PostContributors")
  comments   Comment[]
  likes      Post[]     @relation("PostLikes")
  categories Category[]
  following  User[]     @relation("ContributorSubscriptions")
  followers  User[]     @relation("ContributorSubscriptions")
  name       String?
  bio        String?
  avatar     String?
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  posts       Post[]
  description String?
  parent      Category?  @relation("CategoryParentChildren", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryParentChildren")
  subscribers User[]
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  slug        String  @unique
  posts       Post[]
  description String?
}

model Comment {
  id        Int       @id @default(autoincrement())
  body      String
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentParentChildren", fields: [parentId], references: [id])
  parentId  Int?
  children  Comment[] @relation("CommentParentChildren")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  slug         String    @unique
  body         String
  contributors User[]    @relation("PostContributors")
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int
  type         PostType  @default(ARTICLE)
  tags         Tag[]
  comments     Comment[]
  likes        User[]    @relation("PostLikes")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  published    Boolean   @default(false)
  publishedAt  DateTime?
  startDate    DateTime  @default(now()) @db.Date
  endDate      DateTime  @default(now()) @db.Date
  excerpt      String?
}
